name: Codacy Quality Assurance

on:
  push:
    branches: [ main, develop, codacy-patch-fix ]
  pull_request:
    branches: [ main, develop ]

jobs:
  codacy-security-scan:
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run linting
      - name: Run ESLint
        run: npm run lint --if-present
        continue-on-error: true

      # Build project
      - name: Build project
        run: npm run build

      # Run tests with coverage
      - name: Run tests with coverage
        run: npm run test:coverage --if-present
        continue-on-error: true

      # Upload coverage to Codacy
      - name: Upload coverage reports to Codacy
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage/lcov.info
        continue-on-error: true

      # Run Codacy Analysis CLI
      - name: Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
        continue-on-error: true

  codacy-quality-check:
    name: Codacy Quality Gate
    runs-on: ubuntu-latest
    needs: codacy-security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Quality gate check
      - name: Codacy Quality Gate
        run: |
          echo "üîç Running quality checks..."
          
          # Check if TypeScript compiles without errors
          npx tsc --noEmit
          
          # Check ESLint
          npx eslint src/ --ext .ts,.tsx --max-warnings 0
          
          # Build verification
          npm run build
          
          echo "‚úÖ All quality checks passed!"

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [codacy-security-scan, codacy-quality-check]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [codacy-security-scan, codacy-quality-check]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
